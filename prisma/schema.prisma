generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

model Customer {
  id_customer Int    @id @default(autoincrement())
  name        String @db.VarChar(100)
  email       String @unique @db.VarChar(100)
  username    String @unique @db.VarChar(100)
  password    String @db.VarChar(100)
  role        Role   @default(CUSTOMER)

  // relasi ke Transaction
  transactions Transaction[]
}

model Ebook {
  id_ebook Int    @id @default(autoincrement())
  name     String @db.VarChar(100)
  price    Int
  stock    Int
  about    String @db.VarChar(100)
  author   String @db.VarChar(100)
  cover    String

  // relasi ke Transaction
  transactions Transaction[]

  // relasi explicit ke Genre lewat pivot
  ebookGenres EbookGenre[]
}

model Genre {
  id_genre Int    @id @default(autoincrement())
  name     String @db.VarChar(100)

  // relasi explicit ke Ebook lewat pivot
  ebookGenres EbookGenre[]
}

model EbookGenre {
  id_ebook Int
  id_genre Int

  ebook Ebook @relation(fields: [id_ebook], references: [id_ebook], onDelete: Cascade)
  genre Genre @relation(fields: [id_genre], references: [id_genre], onDelete: Cascade)

  @@id([id_ebook, id_genre])
}

enum Status {
  PENDING
  SUCCESS
  CANCELLED
}

model Transaction {
  id_transaction Int    @id @default(autoincrement())
  id_customer    Int
  id_ebook       Int
  status         Status @default(PENDING)

  customer Customer @relation(fields: [id_customer], references: [id_customer], onDelete: Restrict, onUpdate: Restrict)
  ebook    Ebook    @relation(fields: [id_ebook], references: [id_ebook], onDelete: Restrict, onUpdate: Restrict)

  @@index([id_customer], map: "idx_transaction_customer")
  @@index([id_ebook], map: "idx_transaction_ebook")
}

model Admin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     Role   @default(ADMIN)
}
