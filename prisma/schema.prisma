generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

model customer {
  id_customer Int           @id @default(autoincrement()) // auto-increment
  name        String        @db.VarChar(100)
  email       String        @unique @db.VarChar(100)
  username    String        @unique @db.VarChar(100)
  password    String        @db.VarChar(100)
  role        Role          @default(CUSTOMER)
  ebooks      ebook[]       @relation("CustomerEbooks")
  transaction transaction[]

  @@index([name, email, username, password], map: "Key")
}

model ebook {
  id_ebook Int    @id @default(autoincrement()) // auto-increment
  name     String @db.VarChar(100)
  price    Int
  stock    Int
  about    String @db.VarChar(100)
  author   String @db.VarChar(100)

  customers   customer[]    @relation("CustomerEbooks")
  genres      genre[]       @relation("GenreEbook")
  transaction transaction[]

  @@index([name, price, stock, about, author], map: "Key")
}

model genre {
  id_genre Int    @id @default(autoincrement()) // auto-increment
  name     String @db.VarChar(100)

  ebooks ebook[] @relation("GenreEbook")

  @@index([name], map: "Key")
}

enum Status {
  PENDING
  SUCCESS
  CANCELLED
}

model transaction {
  id_transaction Int      @id @default(autoincrement()) // auto-increment
  id_customer    Int
  id_ebook       Int
  status         Status   @default(PENDING)
  customer       customer @relation(fields: [id_customer], references: [id_customer], onDelete: Restrict, onUpdate: Restrict, map: "transaction_ibfk_1")
  ebook          ebook    @relation(fields: [id_ebook], references: [id_ebook], onDelete: Restrict, onUpdate: Restrict, map: "transaction_ibfk_2")

  @@index([id_customer], map: "id_customer")
  @@index([id_ebook], map: "id_ebook")
}

model admin {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
  role  Role   @default(ADMIN)
}
